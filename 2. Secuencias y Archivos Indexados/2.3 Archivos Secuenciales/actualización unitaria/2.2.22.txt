"En un práctico para la Facultad un grupo de alumnos debe implementar una Red Social llamada UTNBook. Para lo cual debe
utilizar los siguientes archivos:

AMIGOS Ordenado por Cod_Usuario y Cod_Amigo

Cod_UsuarioCod_AmigoFecha_AmistadMensaje_Muro
Cada registro indica la fecha desde que los usuarios son amigos y el último mensaje que un amigo ha escrito en el muro
 del usuario.

NOTIFICACIONES Ordenado por Cod_Usuario y Cod_Amigo

Cod_UsuarioCod_AmigoCod_MovimientoFecha_AmistadMensaje_Muro
Periódicamente se debe actualizar el archivo Amigos, con el fin de que refleje las amistades que posee cada usuario.
En el archivo notificaciones pueden existir tres tipos de acciones: la solicitud de una amistad (Cod_mov = 'A');
la eliminación de una amistad (Cod_mov = 'B'); o la información de un mensaje que un amigo ha escrito en el muro del usuario
 (Cod_mov = 'M'). Considerar que la eliminación de una amistad implica la baja física de un registro y que hay un solo
 registro de Notificaciones por cada registro de Amigo.

+Al finalizar el proceso se desea conocer: el usuario que posee más amigos

ACCION 2.2.21 ES
    AMBIENTE
        Fecha = REGISTRO
            año: N(4)
            mes: 1..12
            dia: 1..31
        FIN_REGISTRO

        AMIGOS = REGISTRO
            clave = REGISTRO
                cod_usu: N(5)
                cod_amigo: N(5)
            FIN_REGISTRO
            fecha_amistad: Fecha
            Mensaje_muro: AN(50)
        FIN_REGISTRO

        MaeOld, MaeAct: Archivo de AMIGOS ordenado por clave
        RegMaeOld, RegMaeAct: AMIGOS

        NOTIFICACIONES = REGISTRO
            clave = REGISTRO
                cod_usu: N(5)
                cod_amigo: N(5)
            FIN_REGISTRO
            cod_mov: ("A","B","M")
            fecha_amistad: Fecha
            Mensaje_Muro: AN(50)
        FIN_REGISTRO

        Mov: Archivo de NOTIFICACIONES ordenado por clave y cod_mov
        RegMov: NOTIFICACIONES

        resgCod_usu, UsuMasAmigos: N(5)
        ContAmigosUsu: entero

        PROCEDIMIENTO LEER_mov() ES
            LEER(Mov, RegMov)
            SI FDS(Mov) ENTONCES
                RegMov.clave:= HV
            FIN_SI
        FIN_PROCEDIMIENTO

        PROCEDIMIENTO LEER_mae() ES
            LEER(MaeOld, RegMaeOld)
            SI FDS(MaeOld) ENTONCES
                RegMaeOld.clave:= HV
            FIN_SI
        FIN_PROCEDIMIENTO

    PROCESO
        ABRIR E/(MaeOld); ABRIR E/(Mov)
        ABRIR /S(MaeAct)

        LEER_mov()
        LEER_mae()

        resgCod_usu:= RegMaeOld.clave.cod_usu
        MayCantAmigos:= 0
        ContAmigosUsu:= 0

        MIENTRAS (RegMaeOld.clave <> HV) o (RegMov.clave <> HV) HACER
            SI resgCod_usu <> RegMaeOld.Cod_usu ENTONCES
                SI ContAmigosUsu > MayCantAmigos ENTONCES
                    MayCantAmigos:= ContAmigosUsu
                    UsuMasAmigos:= resgCod_Usu
                FIN_SI
                ContAmigosUsu:= 0
                resgCod_suc:= RegMaeOld.Cod_usu
            FIN_SI

            ContAmigosUsu:= ContAmigosUsu + 1

            SI RegMaeOld.clave = RegMov.clave ENTONCES //procesos iguales
                SEGUN RegMov.cod_mov HACER
                    "A":
                        ESC("Error, no se puede añadir a un usuario como amigo que ya ha sido añadido anteriormente.")
                        RegMaeAct:= RegMaeOld
                        ESC(MaeAct, RegMaeAct)
                    "M":
                        RegMaeAct:= RegMaeOld
                        RegMaeAct.Mensaje_Muro:= RegMov.Mensaje_Muro
                        ESC(MaeAct, RegMaeAct)
                FIN_SEGUN
                LEER_mae()
                LEER_mov()
            SINO
                SI RegMaeOld.clave < RegMov.clave ENTONCES //registro maestro sin movimiento
                    RegMaeAct:= RegMaeOld
                    ESC(MaeAct, RegMaeAct)
                    LEER_mae()
                SINO
                    //registro movimiento sin registro maestro -> alta
                    SEGUN RegMov.cod_suc HACER
                        "A":
                            RegMaeAct.clave := RegMov.clave
                            RegMaeAct.fecha_amistad := RegMov.fecha_amistad
                            RegMaeAct.Mensaje_muro := RegMov.Mensaje_Muro
                            ESC(MaeAct, RegMaeAct)
                        "M":
                            ESC("No se admite actualizar mensaje muro de un amigo que no está aún registrado")
                        Otro:
                            ESC("No se admite eliminar una amistad que no ha sido registrada aún.")
                    FIN_SEGÚN
                    LEER_mov()
                FIN_SI
            FIN_SI
        FIN_MIENTRAS

        ESC("El usuario con más amigos es el nro", UsuMasAmigos)

        CERRAR(MaeOld)
        CERRAR(MaeAct)
        CERRAR(Mov)
FIN_ACCION
