ACCION pokémon ES
    AMBIENTE
        Fecha = REGISTRO
            año: N(4)
            mes: 1..12
            dia: 1..31
        FIN_REGISTRO

        usuarios = REGISTRO
            clave = REGISTRO
                cod_region: N(4)
                cod_usu: N(10)
            FIN_REGISTRO
            correo: AN(50)
            experiencia: N(7)
        FIN_REGISTRO
        MaeOld, MaeAct: Archivo de usuarios ordenado por clave
        RegMaeOld, RegMaeAct, RegMaeAux: usuarios

        capturas = REGISTRO
            clave = REGISTRO
                cod_region: N(4)
                cod_usu: N(10)
            FIN_REGISTRO
            cod_pok: 1..151
            ptos_exp: N(5)
            fecha_captura: Fecha
            Estado_pok: ("E","I","D") //entrenándose, incubándose, descansando
            Estado_uso: ("A","S","B") //activo, suspendido, baneado
        FIN_REGISTRO
        Mov: Archivo de capturas ordenado por clave y cod_pok
        RegMov: capturas

        cont_baja, cont_alta, cont_modif, op_invalidas: entero

        PROCEDIMIENTO LEER_mov() ES
            LEER(Mov, RegMov)
            SI FDA(Mov) ENTONCES
                RegMov.clave:= HV
            FIN_SI
        FIN_PROCEDIMIENTO

        PROCEDIMIENTO LEER_mae() ES
            LEER(MaeOld, RegMaeOld)
            SI FDA(MaeOld) ENTONCES
                RegMaeOld.clave:= HV
            FIN_SI
        FIN_PROCEDIMIENTO

    PROCESO
        ABRIR E/(MaeOld); ABRIR E/(Mov)
        ABRIR /S(MaeAct)

        LEER_mov()
        LEER_mae()

        cont_baja:= 0
        cont_alta:= 0
        cont_modif:= 0
        op_invalidas:= 0
        MIENTRAS (RegMaeOld.clave <> HV) o (RegMov.clave <> HV) HACER
            SI RegMaeOld.clave = RegMov.clave ENTONCES
                SEGUN RegMov.Estado_usu HACER
                    "A":
                        RegMaeAct:= RegMaeOld
                        SI RegMov.Estado_pok = "E" ENTONCES
                            RegMaeAct.experiencia := RegMaeOld.experiencia + 2 * RegMov.ptos_exp
                        SINO
                            RegMaeAct.experiencia := RegMaeOld.experiencia + RegMov.ptos_exp
                        ESC(MaeAct, RegMaeAct)
                        cont_actualización:= cont_actualización + 1
                    "S":
                        cont_baja:= cont_baja + 1
                    "B":
                        op_invalidas:= op_invalidas + 1
                    FIN_SEGUN
                LEER_mae()
                LEER_mov()
            SINO
                SI RegMaeOld.clave < RegMov.clave ENTONCES
                    RegMaeAct:= RegMaeOld
                    ESC(MaeAct, RegMaeAct)
                    LEER_mae()
                SINO
                    SEGUN RegMov.Estado HACER
                        "A":
                            RegMaeAct.clave := RegMov.clave
                            SI RegMov.Estado_pok = "E" ENTONCES
                                RegMaeAct.experiencia := 2 * RegMov.ptos_exp
                            SINO
                                RegMaeAct.experiencia := RegMov.ptos_exp
                            FIN_SI
                            RegMaeAct.correo:= ""
                            ESC(MaeAct, RegMaeAct)
                        "S"
                            op_invalida:= op_invalida + 1
                        OTRO:
                            op_invalida:= op_invalida + 1
                    FIN_SEGUN
                    LEER_Mov()
                FIN_SI
            FIN_SI
        FIN_MIENTRAS

        ESC("Cantidad de bajas realizadas correctamente: ",cont_baja)
        ESC("Cantidad de altas realizadas correctamente: ",cont_alta)
        ESC("Cantidad de modificaciones realizadas correctamente: ",cont_modif)
        ESC("Cantidas de operaciones invalidas: ",op_invalidas)

        CERRAR(MaeOld)
        CERRAR(MaeAct)
        CERRAR(Mov)